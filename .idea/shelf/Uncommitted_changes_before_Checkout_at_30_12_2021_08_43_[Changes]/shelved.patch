Index: ServerWS.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//Connection a mongoDB\r\nvar mongoose = require('mongoose');\r\nmongoose.connect('mongodb://127.0.0.1:27017/JeuDeDames');\r\n\r\nvar db = mongoose.connection;\r\n\r\ndb.on('error', console.error.bind(console, 'connection error:'));\r\ndb.once('open', function() {\r\n    console.log(\"Connection BDD Ouverte!\");\r\n});\r\n\r\nvar Schema = mongoose.Schema;\r\n\r\nconst userSchema = new Schema({\r\n    pseudo: String,\r\n    mdp: String,\r\n    nbPartiesJouees: Number,\r\n    nbPartiesGagnees: Number\r\n});\r\n\r\n//schéma utilisateur\r\nconst partySchema = new Schema({\r\n    p1: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    p2: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    winner: String,\r\n    loser: String\r\n});\r\n\r\n\r\nconst topScoreSchema = new Schema({\r\n    pseudo: String,\r\n    score: Number\r\n});\r\n\r\n//Definition du schéma utilisateur\r\nvar SomeUser = mongoose.model('users', userSchema);\r\nvar topScore = mongoose.model('topscores', topScoreSchema);\r\n\r\n//Definition du schéma partie\r\nlet Party = mongoose.model('Partie', partySchema);\r\n\r\n//Creation du serveur\r\nconst http = require('http');\r\nconst server = http.createServer();\r\nserver.listen(9898);\r\n\r\n// Création du server WebSocket qui utilise le serveur \r\nconst WebSocketServer = require('websocket').server;\r\nconst wsServer = new WebSocketServer({\r\n    httpServer: server\r\n});\r\nconsole.log(\"Serveur ouvert\");\r\n\r\n// Mise en place des événements WebSockets\r\nwsServer.on('request', function(request) {\r\n    const connection = request.accept(null, request.origin);\r\n    console.log(\"Connection au serveur depuis un client - Serveur\");\r\n\r\n    //Un socket console.log(connection); \r\n\r\n    //A la réception d'un message\r\n    connection.on('message', function(message) {\r\n\r\n        //Envoi d'un accusé de récéption au client\r\n        console.log(\"Message reçu du client : \" + message.utf8Data + \" - Serveur\");\r\n        let json = JSON.stringify({ \"message\": \"Message bien reçu - Serveur\" });\r\n        connection.send(json);\r\n\r\n        //Gestion du message si c'est un JSON ou non\r\n        let messageIsJSON = true;\r\n        //let messageJSON;\r\n        /* let login;\r\n         let mdp;\r\n         var parsedJson*/\r\n        try {\r\n            parsedJson = JSON.parse(message.utf8Data);\r\n            console.log(parsedJson);\r\n\r\n        } catch (err) {\r\n            messageIsJSON = false;\r\n        }\r\n\r\n        if (messageIsJSON) {\r\n            //Récupération des données JSON envoyées par le client\r\n            let messageJSON = parsedJson.message;\r\n            let login = parsedJson.login;\r\n            let mdp = parsedJson.mdp;\r\n            if (messageJSON == \"Auth\") {\r\n                addUserIfUnique(login, mdp, connection);\r\n\r\n            }\r\n            if (messageJSON == \"Score Update\") {\r\n                updateTopScore(login);\r\n\r\n            }\r\n\r\n            if (messageJSON == \"En attente d'une partie\") {\r\n                addUserInWaitingList(login, connection);\r\n            }\r\n\r\n            if (messageJSON == \"Création d'une nouvelle partie\") {\r\n\r\n                //creer une nouvelle partie\r\n                newParty(login, login);\r\n            }\r\n\r\n            if (messageJSON == \"Classement\") {\r\n                getClassement(connection);\r\n            }\r\n        }\r\n    });\r\n\r\n    //A la fermeture d'une connection\r\n    connection.on('close', function(reasonCode, description) {\r\n        console.log(\"Connection fermée par un client - Serveur\");\r\n    });\r\n});\r\n\r\nlet usersConnectedList = []; //List socket pseudo\r\nlet userWaitingList = []; // Contient les logins utilisateur attendant partie\r\nlet userInGameList = []; //Contient les logins des utilisateurs en partie\r\nlet jsonMessageToClient;\r\n//Connection d'un utilisateur\r\n//Récupération \r\nfunction connectUser(login, mdp, connection) {\r\n    let userInformations = [login, connection];\r\n    usersConnectedList.push(userInformations);\r\n    console.log(\"Ajout de \" + login + \" dans la connected list\");\r\n    let json = JSON.stringify({ \"message\": \"Utilisateur Connecté\" });\r\n    connection.send(json);\r\n}\r\n\r\nfunction addUserInWaitingList(login, connection) {\r\n    console.log(\"Ajout de \" + login + \" dans la waiting list\");\r\n    let userInformations = [login, connection];\r\n    userWaitingList.push(userInformations);\r\n    console.log(userWaitingList);\r\n}\r\n\r\n\r\nfunction pickTwoUsers(userWaitingList) {\r\n    let index1 = Math.floor(Math.random() * userWaitingList.length);\r\n    let player1 = userWaitingList[index1];\r\n\r\n    let index2 = Math.floor(Math.random() * userWaitingList.length);\r\n    let player2 = userWaitingList[index2];\r\n    return { player1, player2 };\r\n}\r\n\r\n\r\nfunction searchDuo() {}\r\n\r\nfunction startGame(player1, player2) {}\r\n\r\nfunction removeUserInWaitingList(index) {\r\n    userWaitingList.splice(index, 1);\r\n}\r\n\r\n\r\nfunction handleUserDisconnected() {\r\n\r\n}\r\n\r\n\r\nfunction addUserIfUnique(login, mdp, connection) {\r\n    SomeUser.countDocuments({ pseudo: login }, function(err, count) {\r\n        if (count == 0) {\r\n            addUser(login, mdp, connection);\r\n            connectUser(login, mdp, connection);\r\n        } else {\r\n            connectUser(login, mdp, connection);\r\n        }\r\n    });\r\n}\r\n\r\n//Ajout d'un utilisateur\r\nfunction addUser(login, mdp, connection) {\r\n    let instance = new SomeUser({ pseudo: login, mdp: mdp, nbPartiesJouees: 0, nbPartiesGagnees: 0 });\r\n    instance.save(function(err) {\r\n        if (err) return handleError(err);\r\n        console.log(\"addUser\");\r\n        createTopScore(login);\r\n    });\r\n}\r\n\r\nfunction createTopScore(login) {\r\n    let instanceTopScore = new topScore({ pseudo: login, score: 0 });\r\n    instanceTopScore.save(function(err) {\r\n        if (err) return handleError(err);\r\n        console.log(\"createTopScore\")\r\n    });\r\n}\r\n\r\nfunction updateTopScore(login) {\r\n    let score = 0;\r\n    SomeUser.findOne({ pseudo: login }, 'nbPartiesJouees nbPartiesGagnees', function(err, user) {\r\n        if (err) return handleError(err);\r\n        if (user.nbPartiesJouees != 0) {\r\n            score = user.nbPartiesGagnees / user.nbPartiesJouees * 100;\r\n        }\r\n    });\r\n\r\n    topScore.findOneAndReplace({ pseudo: login }, { pseudo: login, score: score }, function(err, user) {\r\n        if (err) return handleError(err);\r\n    });\r\n\r\n    console.log(\"updateTopScore\")\r\n}\r\n\r\nfunction updateNbPartiesJouees(login) {\r\n    SomeUser.findOne({ pseudo: login }, 'nbPartiesJouees', function(err, user) {\r\n        if (err) return handleError(err);\r\n        user.nbPartiesJouees += 1;\r\n    });\r\n    console.log(\"updateNbPartiesJouees\")\r\n}\r\n\r\n\r\nfunction updateNbPartiesGagnees(login) {\r\n    SomeUser.findOne({ pseudo: login }, 'nbPartiesGagnees', function(err, user) {\r\n        if (err) return handleError(err);\r\n        user.nbPartiesGagnees += 1;\r\n    });\r\n    console.log(\"updateNbPartiesGagnees\")\r\n}\r\n\r\nfunction getClassement(connection) {\r\n    topScore.find(function(err, scores) {\r\n        if (err) return handleError(err);\r\n        console.log(scores);\r\n        let json = JSON.stringify({ \"message\": \"Classement chargé\", \"scores\": scores });\r\n        connection.send(json);\r\n    });\r\n}\r\n\r\n\r\n//Creer une nouvelle partie\r\nfunction newParty(player1, player2) {\r\n    let newParty = new Party({\r\n        p1: player1,\r\n        p2: player2,\r\n        winner: \"\",\r\n        loser: \"\"\r\n    });\r\n\r\n    //Stocker la parti en base de données\r\n    try {\r\n        newParty.save();\r\n        console.log(\"\\nPartie sauvgarder en BDD\\n\");\r\n    } catch (e) {\r\n        console.error(e)\r\n    };\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ServerWS.js b/ServerWS.js
--- a/ServerWS.js	(revision 03c72772e78ec48fc96ea83ee2ac096cb4b16626)
+++ b/ServerWS.js	(date 1640849710877)
@@ -18,8 +18,7 @@
     nbPartiesGagnees: Number
 });
 
-//schéma utilisateur
-const partySchema = new Schema({
+const currentGameSchema = new Schema({
     p1: {
         type: String,
         required: true
